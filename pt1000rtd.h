#ifndef PT1000RTD_H
#define PT1000RTD_H

#if (defined(__AVR__)
#include <avr/pgmspace.h>
#else
#include <pgmspace.h>
#endif

#if (ARDUINO >= 100)
    #include <Arduino.h>
#else
    #include <WProgram.h>
#endif

#define CELSIUS_MAX = 510
#define CELSIUS_MIN = -80

/*******************************************************************
*    pt100rtd list of resistances v temperature
*
*    DIN 43760 resistance values (ohms) were multiplied by 100 and
*    converted to 32 bit unsigned integers with no loss of accuracy.
* 
*    Examples:
*	68335  represents 683.35 ohms that correspondents to a temperatur of -80C
*	100000 ==> 1000.00 ohms @   0C
*	138510 ==> 1385.10 ohms @ 100C 
* 
*   The list resides in flash since it's too large for SRAM or EEPROM
*******************************************************************/

const uint32_t (pt1000_table[590] PROGMEM = {
    68335,68727,69129,6953,69931,70332,70733,71134,71534,71934 //10
    72335,72735,73134,73534,73934,74333,74732,75132,75530,75929 //20
    76328,76726,77125,77523,77921,78319,78717,79114,79512,79909 //30
    80306,80703,81100,81497,81894,8226,82687,83083,83479,83871
    84271,84666,85062,85457,85853,86248,86643,87038,87433,87827
    88222,88616,89010,89404,89799,90192,90586,9098,91373,91767
    92160,92553,92946,93339,93732,94124,94517,94909,95302,95694
    99686,96478,9687,97261,97653,98044,98436,98827,99218,99609
    100000,100390,100780,101170,101560,101950,102340,102730,103120,103510
    103900,104290,104680,105070,105460,105850,106240,106630,107020,107400 //100
    107790,108180,108570,108960,109350,109730,110120,110510,110900,111290
    111670,112060,112450,112830,113220,113610,114000,114380,114770,115150
    115540,115930,116310,116700,117080,117470,117860,118240,118630,119010
    119400,119780,120170,120550,120940,121320,121710,122090,122470,122860
    123240,123630,124010,124390,124780,125160,125540,125930,126310,126690
    127080,127460,127840,128220,128610,128990,129370,129750,130130,130520
    130900,131280,131660,132040,132420,132800,133180,133570,133950,134330
    134710,135090,135470,135850,136230,136610,136990,137370,137750,138130
    138510,138880,139260,139640,140020,140400,140780,141160,141540,141910
    142290,142670,143050,143430,143800,144180,144560,144940,145310,145690 //200
    146070,146440,146820,147200,147570,147950,148330,148700,149080,149460
    149830,150210,150580,150960,151330,151710,152080,152460,152830,153210
    153580,153960,154330,154710,155080,155460,155830,156200,156580,156950
    157330,157700,158070,158450,158820,159190,159560,159940,160310,160680
    161050,161430,161800,162170,162540,162910,163290,163660,164030,164400
    164770,165140,165510,165890,166260,166630,167000,167370,167740,168110
    168480,168850,169220,169590,169960,170330,170700,171070,171430,171800
    172170,172540,172910,173280,173650,174020,174380,174750,175120,175490
    175860,176220,176590,176960,177330,177690,178060,178430,178790,179160
    179530,179890,180260,180630,180990,181360,181720,182090,182460,182820 //300
    183190,183550,183920,184280,184650,185010,185380,185740,186110,186470
    186840,187200,187560,187930,188290,188660,189020,189380,189750,190110
    190470,190840,191200,191560,191920,192290,192650,193010,193370,193740
    194100,194460,194820,195180,195550,195910,196270,196630,196990,197350
    197710,198070,198430,198790,199150,199510,199870,200230,200590,200950
    201310,201670,202030,202390,202750,203110,203470,203830,204190,204550
    204900,205260,205620,205980,206340,206700,207050,207410,207770,208130
    208480,208840,209200,209560,209910,210270,210630,210980,211340,211700
    212050,212410,212760,213120,213480,213830,214190,214540,214900,215250
    215610,215960,216320,216670,217030,217380,217740,218090,218440,218800 //400
    219150,219510,219860,220210,220570,220920,221270,221630,221980,222330
    222680,223040,223390,223740,224090,224450,224800,225150,225500,225850
    226210,226560,226910,227260,227610,227960,228310,228660,229020,229370
    229720,230070,230420,230770,231120,231470,231820,232170,232520,232870
    233210,233560,233910,234260,234610,234960,235310,235660,236000,236350
    236700,237050,237400,237740,238090,238440,238790,239130,239480,239830
    240180,240520,240870,241220,241560,241910,242260,242600,242950,243290
    243640,243990,244330,244680,245020,245370,245710,246060,246400,246750
    247090,247440,247780,248130,248470,248810,249160,249500,249850,250190
    250530,250880,251220,251560,251910,252250,252590,252930,253280,253620 //500
    253960,254300,254650,254990,255330,255670,256010,256350,256700,257040
    257380,257720,258060,258400,258740,259080,259420,259760,260100,260440
    260780,261120,261460,261800,262140,262480,262820,263160,263500,263840
    264180,264520,264860,265200,265530,265870,266210,266550,266890,267220
    267560,267900,268240,268570,268910,269250,269590,269920,270260,270600
    270930,271270,271610,271940,272280,272610,272950,273290,273620,273960
    274290,274630,274960,275300,275630,275970,276300,276640,276970,277310
    277640,277980,278310,278640,278980,279310,279640,279980,280310,280640
    280980,281310,281640,281980,282310,282640,282970,283310,283640,283970 };

const int PT1000_TABLE_MAXIDX = ((sizeof( pt1000_table))/(sizeof (uint32_t)));

class pt1000rtd
{
private:
    int search_pt1000_list(uint32_t key) ;
    float ohmsX100_to_celsius(uint32_t ohmsX100) ;

public:
    pt100rtd() ;

    float celsius (uint32_t ohmsX100) ;
    float celsius(float Rrtd) ;

    float celsius_to_Pt1000ohms (float celsius) ;

    float celsius_cvd(float R_ohms) ;
    float celsius_cubic(float R_ohms) ;
    float celsius_polynomial (float R_ohms) ;
    float celsius_rationalpolynomial (float R_ohms) ;
} ;
 #endif //PT1000RTD_H